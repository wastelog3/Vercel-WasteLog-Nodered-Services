[{"id":"df3e1bb1da28e772","type":"tab","label":"Flow 1","disabled":false,"info":"","env":[]},{"id":"ac4ecfcaa39d3b7e","type":"tab","label":"Proyek Geofence (Logika Terpisah)","disabled":false,"info":"Versi ini mengimplementasikan permintaan spesifik: \n- Data pengukuran 'manual' HANYA disimpan ke koleksi 'current_volume'.\n- Data pengukuran 'auto_exit' HANYA disimpan ke 'activity_logs'.\n- Dashboard JS disesuaikan untuk mengambil data dari endpoint yang benar."},{"id":"websocket-listener-main","type":"websocket-listener","path":"/ws/realtimelocation"},{"id":"a8b83812958509ab","type":"tls-config","name":"","cert":"","key":"","ca":"","certname":"","keyname":"","caname":"emqxsl-ca (4).crt","servername":"","verifyservercert":true,"alpnprotocol":""},{"id":"252e7d713071821a","type":"mqtt-broker","name":"wastelog3","broker":"mqtts://o9462044.ala.eu-central-1.emqxsl.com","port":"8883","tls":"a8b83812958509ab","clientid":"","autoConnect":true,"usetls":true,"protocolVersion":"5","keepalive":60,"cleansession":true,"autoUnsubscribe":true,"birthTopic":"","birthQos":"0","birthRetain":"false","birthPayload":"","birthMsg":{},"closeTopic":"","closeQos":"0","closeRetain":"false","closePayload":"","closeMsg":{},"willTopic":"","willQos":"0","willRetain":"false","willPayload":"","willMsg":{},"userProps":"","sessionExpiry":""},{"id":"51e41dae8892745c","type":"inject","z":"ac4ecfcaa39d3b7e","name":"Mulai Saat Deploy","props":[{"p":"payload"}],"repeat":"","crontab":"","once":true,"onceDelay":0.1,"topic":"","payload":"true","payloadType":"bool","x":150,"y":60,"wires":[["4b9595070aba8168"]]},{"id":"4b9595070aba8168","type":"function","z":"ac4ecfcaa39d3b7e","name":"Listener Geofence","func":"// Inisialisasi listener untuk menyinkronkan data geofence dari Firestore ke memori Node-RED\n// Ini akan berjalan sekali saat deploy dan akan otomatis update jika ada perubahan di Firestore\n\nconst fb = global.get('firebase');\nif (!fb) {\n    node.error(\"Koneksi Firebase tidak ditemukan. Pastikan node 'firebase-config' sudah dikonfigurasi.\");\n    return;\n}\n\n// Pasang listener ke koleksi 'geofences'\nfb.firestore().collection('geofences').onSnapshot(querySnapshot => {\n    const allFences = [];\n    querySnapshot.forEach(doc => {\n        allFences.push({ id: doc.id, ...doc.data() });\n    });\n\n    // Simpan data geofence yang sudah diperbarui ke flow context (memori)\n    flow.set('allGeofences', allFences);\n    node.warn(allFences.length + \" area geofence berhasil disinkronkan ke memori.\");\n\n}, error => {\n    node.error(\"Gagal mendengarkan perubahan geofence: \", error);\n});\n\nnode.log(\"Listener Geofence berhasil dipasang.\");\n\nreturn null; // Menghentikan alur karena listener berjalan di latar belakang","outputs":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":410,"y":60,"wires":[]},{"id":"c49131a791975289","type":"mqtt in","z":"ac4ecfcaa39d3b7e","name":"MQTT GPS Data Masuk","topic":"/wastelog/data/gps/#","qos":"2","datatype":"json","broker":"252e7d713071821a","nl":false,"rap":true,"rh":0,"inputs":0,"x":170,"y":120,"wires":[["0507d30f79a10b45","3494977fbc9cdeb4"]]},{"id":"0507d30f79a10b45","type":"function","z":"ac4ecfcaa39d3b7e","name":"Geofence Engine","func":"// --- FUNGSI BANTUAN UNTUK MENGHITUNG JARAK (HAVERSINE) ---\nfunction getDistanceInMeters(lat1, lon1, lat2, lon2) {\n    const R = 6371e3; // Radius bumi dalam meter\n    const φ1 = lat1 * Math.PI / 180;\n    const φ2 = lat2 * Math.PI / 180;\n    const Δφ = (lat2 - lat1) * Math.PI / 180;\n    const Δλ = (lon2 - lon1) * Math.PI / 180;\n\n    const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\n        Math.cos(φ1) * Math.cos(φ2) *\n        Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n    return R * c; // Jarak dalam meter\n}\n\n// --- LOGIKA GEOFENCING YANG DIPERBAIKI (Versi 2) ---\n\n// 1. Ambil data dari pesan masuk\nconst topicParts = msg.topic.split('/');\nlet deviceId = topicParts[topicParts.length - 1] || \"gps_wastelog_01\";\n\nconst gpsData = msg.payload;\nconst deviceLat = gpsData.latitude;\nconst deviceLon = gpsData.longitude;\n\n// 2. Ambil data geofence dari context flow\nconst geofences = flow.get('allGeofences') || [];\nif (geofences.length === 0) {\n    node.warn(\"Data Geofence belum dimuat. Mengabaikan data GPS.\");\n    return null;\n}\n\n// 3. Ambil status terakhir perangkat dari memori\nconst lastStatus = flow.get(`lastGeofenceStatus_${deviceId}`) || { areaId: null, areaName: null, entryTime: null };\nconst lastAreaId = lastStatus.areaId;\n\n// 4. Tentukan di area mana perangkat berada SAAT INI\nlet currentArea = null;\nfor (const fence of geofences) {\n    if (fence.koordinat && typeof fence.radius1 === 'number') {\n        const innerRadius = Math.min(fence.radius1, fence.radius2);\n        const fenceCenterLat = fence.koordinat._latitude;\n        const fenceCenterLon = fence.koordinat._longitude;\n\n        const distance = getDistanceInMeters(deviceLat, deviceLon, fenceCenterLat, fenceCenterLon);\n\n        if (distance < innerRadius) {\n            currentArea = fence;\n            break;\n        }\n    }\n}\nconst currentAreaId = currentArea ? currentArea.id : null;\n\n// 5. Bandingkan status SAAT INI dengan status SEBELUMNYA untuk menentukan event\nlet newStatus;\nif (currentAreaId && !lastAreaId) {\n    newStatus = \"ENTERED\";\n} else if (!currentAreaId && lastAreaId) {\n    newStatus = \"EXITED\";\n} else if (currentAreaId && lastAreaId && currentAreaId === lastAreaId) {\n    newStatus = \"STILL_INSIDE\";\n} else {\n    newStatus = \"STILL_OUTSIDE\";\n}\n\n// 6. Siapkan msg object berdasarkan event\nmsg.status = newStatus;\nmsg.deviceId = deviceId;\nmsg.timestamp = gpsData.gps_time ? new Date(gpsData.gps_time) : new Date();\nmsg.location = { lat: deviceLat, lon: deviceLon };\n\nif (newStatus === \"ENTERED\" || newStatus === \"STILL_INSIDE\") {\n    msg.areaId = currentAreaId;\n    msg.areaName = currentArea.nama || currentArea.name || 'Nama Area Tidak Ditemukan';\n} else if (newStatus === \"EXITED\") {\n    // =======================================================================\n    // PERUBAHAN KUNCI DI SINI: Data diambil dari 'lastStatus' di memori,\n    // bukan lagi dari array 'geofences' yang mungkin sudah berubah.\n    // =======================================================================\n    msg.exitedAreaId = lastAreaId; // Ambil ID dari status terakhir\n    msg.exitedAreaName = lastStatus.areaName || 'Nama Area (sudah dihapus)'; // Ambil NAMA dari status terakhir\n    msg.entryTime = lastStatus.entryTime;\n    msg.areaId = null;\n    msg.areaName = null;\n}\n\n// 7. Update status terakhir di flow context\nlet newLastStatus;\nif (newStatus === \"ENTERED\") {\n    // =======================================================================\n    // PERUBAHAN KUNCI DI SINI: Simpan NAMA AREA ke dalam memori saat masuk\n    // =======================================================================\n    newLastStatus = {\n        areaId: currentAreaId,\n        areaName: currentArea.nama || currentArea.name || 'Nama Area Tidak Ditemukan',\n        entryTime: Date.now()\n    };\n} else if (newStatus === \"EXITED\" || newStatus === \"STILL_OUTSIDE\") {\n    // Kosongkan status jika keluar atau memang di luar\n    newLastStatus = { areaId: null, areaName: null, entryTime: null };\n} else { // STILL_INSIDE\n    // Jika masih di dalam, pertahankan status yang sudah ada\n    newLastStatus = lastStatus;\n}\nflow.set(`lastGeofenceStatus_${deviceId}`, newLastStatus);\n\n\n// Hapus payload asli karena sudah tidak dibutuhkan\ndelete msg.payload;\n\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":410,"y":120,"wires":[["e42835f6ac916968","bb98b01d36c262db"]]},{"id":"e42835f6ac916968","type":"switch","z":"ac4ecfcaa39d3b7e","name":"Routing Event","property":"status","propertyType":"msg","rules":[{"t":"eq","v":"ENTERED","vt":"str"},{"t":"eq","v":"EXITED","vt":"str"}],"checkall":"false","repair":false,"outputs":2,"x":640,"y":120,"wires":[["905d3eeaf36e08d7"],["51eab671e22d3c7b"]]},{"id":"905d3eeaf36e08d7","type":"function","z":"ac4ecfcaa39d3b7e","name":"Simpan Log MASUK","func":"const fb = global.get('firebase');\n\nconst deviceId = msg.deviceId;\nif (!deviceId) {\n    node.error(\"deviceId tidak ditemukan di dalam pesan (msg). Alur dihentikan.\");\n    return;\n}\n\nconst logData = {\n    deviceId: msg.deviceId,\n    event: \"ENTERED\",\n    areaId: msg.areaId,\n    areaName: msg.areaName,\n    timestamp: msg.timestamp, // Sudah dalam format Date object dari Geofence Engine\n    koordinat: new fb.firestore.GeoPoint(msg.location.lat, msg.location.lon)\n};\n\n(async () => {\n    try {\n        await fb.firestore().collection('activity_logs').add(logData);\n        node.log(\"Log MASUK berhasil disimpan untuk \" + deviceId);\n    } catch (error) {\n        node.error(\"Gagal menyimpan log masuk: \" + error.message);\n    }\n})();\n\nreturn null;","outputs":0,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":940,"y":100,"wires":[]},{"id":"51eab671e22d3c7b","type":"function","z":"ac4ecfcaa39d3b7e","name":"Simpan Log KELUAR & Picu Ukur","func":"\nconst fb = global.get('firebase');\n\n// Pemeriksaan data awal\nif (!msg.entryTime || !msg.exitedAreaId) {\n    node.warn(\"Pesan EXITED tidak memiliki entryTime atau exitedAreaId.\");\n    return null;\n}\n\n// Persiapan data untuk disimpan\nconst entryTime = new Date(msg.entryTime);\nconst exitTime = msg.timestamp;\nconst durationSeconds = Math.round((exitTime.getTime() - entryTime.getTime()) / 1000);\n\nconst logData = {\n    deviceId: msg.deviceId,\n    event: \"EXITED\",\n    areaId: msg.exitedAreaId,\n    areaName: msg.exitedAreaName,\n    entryTime: entryTime,\n    exitTime: exitTime,\n    durationSeconds: durationSeconds,\n    koordinat: new fb.firestore.GeoPoint(msg.location.lat, msg.location.lon),\n    timestamp: exitTime // Gunakan exitTime sebagai timestamp utama untuk sorting\n};\n\n(async () => {\n    try {\n        await fb.firestore().collection('activity_logs').add(logData);\n        node.log(\"Log EXITED berhasil disimpan ke Firestore.\");\n\n        // Menyiapkan perintah ukur\n        const newMsg = {\n            topic: `/wastelog/perintah/${msg.deviceId}`,\n            payload: {\n                \"msg\": \"ukur_jarak\",\n                \"source\": \"auto_exit\",\n                \"deviceId\": msg.deviceId,\n                \"context\": {\n                    \"areaId\": msg.exitedAreaId,\n                    \"areaName\": msg.exitedAreaName\n                }\n            }\n        };\n        \n        node.send(newMsg);\n\n    } catch (error) {\n        node.error(\"Gagal menyimpan log EXITED ke Firestore!\", error);\n    }\n})();\n\nreturn null;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":940,"y":140,"wires":[["973749506440aec9"]]},{"id":"973749506440aec9","type":"mqtt out","z":"ac4ecfcaa39d3b7e","name":"Kirim Perintah Ukur","topic":"/wastelog/command","qos":"1","retain":"false","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"252e7d713071821a","x":1250,"y":140,"wires":[]},{"id":"c5355b56c2c460f9","type":"mqtt in","z":"ac4ecfcaa39d3b7e","name":"Terima Jarak Hasil Ukur","topic":"/wastelog/data/distance/#","qos":"2","datatype":"json","broker":"252e7d713071821a","nl":false,"rap":true,"rh":0,"inputs":0,"x":160,"y":220,"wires":[["1d71888818ca492d","7a57d068db4f4e94"]]},{"id":"1d71888818ca492d","type":"function","z":"ac4ecfcaa39d3b7e","name":"Kalkulasi & Simpan VOLUME","func":"// =====================================================================\n// Bagian 1: Inisialisasi dan Pengolahan Data\n// =====================================================================\n\nconst fb = global.get('firebase');\nif (!fb) {\n    node.error(\"Koneksi Firebase tidak ditemukan.\");\n    return;\n}\n\nconst payload = msg.payload;\nconst distance_cm = payload.jarak_cm;\nconst deviceId = payload.deviceId;\nconst source = payload.source;\nconst context = payload.context || {};\n\nif (typeof distance_cm !== 'number' || !deviceId) {\n    node.error(\"Data 'jarak_cm' atau 'deviceId' tidak valid. Alur dihentikan.\");\n    return null;\n}\n\nlet areaId = null;\nlet areaName = 'Pengukuran Manual'; // Default untuk 'manual'\n\nif (source === 'auto_exit' && context.areaId) {\n    areaId = context.areaId;\n    areaName = context.areaName || 'Nama Area Tidak Tersedia';\n}\n\n// Kalkulasi Volume\nconst TANK_HEIGHT_CM = 200;\nconst TANK_LENGTH_CM = 150;\nconst TANK_WIDTH_CM = 100;\nconst filledHeight_cm = TANK_HEIGHT_CM - distance_cm;\n\nlet volume_liter = 0;\nif (filledHeight_cm > 0) {\n    volume_liter = (TANK_LENGTH_CM * TANK_WIDTH_CM * filledHeight_cm) * 0.001;\n}\nvolume_liter = Math.max(0, parseFloat(volume_liter.toFixed(2)));\n\nconst volumeData = {\n    deviceId: deviceId,\n    event: \"VOLUME_MEASUREMENT\",\n    source: source || 'unknown',\n    timestamp: new Date(),\n    distance_cm: distance_cm,\n    calculatedVolume_liter: volume_liter,\n    areaId: areaId,\n    areaName: areaName\n};\n\n// =====================================================================\n// Bagian 2: Logika Penyimpanan Data (LOGIKA TERPISAH)\n// =====================================================================\n\n// JIKA SUMBERNYA 'auto_exit' -> Simpan sebagai log histori\nif (source === 'auto_exit') {\n    (async () => {\n        try {\n            await fb.firestore().collection('activity_logs').add(volumeData);\n            node.log(`Log (auto_exit) untuk ${deviceId} berhasil disimpan.`);\n        } catch (error) {\n            node.error(`Gagal menyimpan log (auto_exit): ${error.message}`);\n        }\n    })();\n\n// JIKA SUMBERNYA 'manual' -> Update/timpa data terkini\n} else if (source === 'manual') {\n    (async () => {\n        try {\n            await fb.firestore()\n                .collection('current_volume')       // Simpan ke koleksi data terkini\n                .doc(deviceId)                  // Gunakan deviceId sebagai kunci dokumen\n                .set(volumeData, { merge: true }); // .set() akan create/overwrite\n            node.log(`Volume terkini (manual) untuk ${deviceId} berhasil diupdate.`);\n        } catch (error) {\n            node.error(`Gagal mengupdate volume terkini (manual): ${error.message}`);\n        }\n    })();\n\n} else {\n    node.warn(`Sumber '${source}' tidak dikenali. Tidak ada data yang disimpan.`);\n}\n\nreturn null;","outputs":0,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":450,"y":240,"wires":[]},{"id":"0a58020a05aeebaf","type":"function","z":"ac4ecfcaa39d3b7e","name":"Buat Perintah Ukur Manual","func":"\nmsg.payload = {\n    \"msg\": \"ukur_jarak\",\n    \"source\": \"manual\",\n    \"deviceId\": \"gps_wastelog_01\"\n};\n\nmsg.topic = \"/wastelog/perintah/gps_wastelog_01\";\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1000,"y":180,"wires":[["973749506440aec9","5ec34f5875011c75"]]},{"id":"8e4f4f2f20b0eb0c","type":"http in","z":"ac4ecfcaa39d3b7e","name":"POST /api/login","url":"/api/login","method":"post","upload":true,"swaggerDoc":"","x":140,"y":340,"wires":[["f42fd7ea024a6f54"]]},{"id":"f42fd7ea024a6f54","type":"function","z":"ac4ecfcaa39d3b7e","name":"Validate Login","func":"// Ambil username dan password yang dikirim dari web\nconst username = msg.payload.username;\nconst password = msg.payload.password;\n\n// Untuk demo, gunakan username/password hardcode.\nconst users = {\n    \"admin\": \"admin123\",\n    \"user\": \"rahasia\"\n};\n\nif (users[username] && users[username] === password) {\n    msg.payload = { success: true, message: \"Login berhasil!\" };\n    msg.statusCode = 200; // OK\n} else {\n    msg.payload = { success: false, message: \"Username atau password salah.\" };\n    msg.statusCode = 401; // Unauthorized\n}\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":500,"y":340,"wires":[["75dffeb0f016e1ad"]]},{"id":"75dffeb0f016e1ad","type":"http response","z":"ac4ecfcaa39d3b7e","name":"Login Response","statusCode":"","headers":{},"x":880,"y":340,"wires":[]},{"id":"f3423b0c0609b047","type":"http in","z":"ac4ecfcaa39d3b7e","name":"GET /api/history","url":"/api/history","method":"get","upload":false,"swaggerDoc":"","x":140,"y":420,"wires":[["22eff9d22d417489"]]},{"id":"22eff9d22d417489","type":"function","z":"ac4ecfcaa39d3b7e","name":"Query History Logs","func":"const fb = global.get('firebase');\n\n(async () => {\n    try {\n        let query = fb.firestore().collection('activity_logs')\n            .orderBy('timestamp', 'desc')\n            .limit(200);\n\n        const snapshot = await query.get();\n        const history = [];\n        snapshot.forEach(doc => {\n            const data = doc.data();\n            // Ubah format waktu agar bisa dibaca\n            for (const key in data) {\n                if (data[key] && typeof data[key].toDate === 'function') {\n                    data[key] = data[key].toDate().toISOString();\n                }\n            }\n            history.push({ id: doc.id, ...data });\n        });\n\n        msg.payload = history;\n        node.send(msg);\n\n    } catch (error) {\n        msg.statusCode = 500;\n        msg.payload = { error: \"Gagal mengambil data histori: \" + error.message };\n        node.send(msg);\n    }\n})();","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":490,"y":420,"wires":[["b11c3b433cc33eb6"]]},{"id":"b11c3b433cc33eb6","type":"http response","z":"ac4ecfcaa39d3b7e","name":"History Response","statusCode":"200","headers":{},"x":870,"y":420,"wires":[]},{"id":"d6bd8e30bfb7417e","type":"http in","z":"ac4ecfcaa39d3b7e","name":"GET /api/geofences","url":"/api/geofences","method":"get","upload":false,"swaggerDoc":"","x":150,"y":500,"wires":[["9d172a8f6cc6947b"]]},{"id":"9d172a8f6cc6947b","type":"function","z":"ac4ecfcaa39d3b7e","name":"GET All Geofences","func":"// Menggunakan data yang sudah ada di memori (flow context) untuk respon cepat\nconst geofences = flow.get('allGeofences') || [];\n\n// Format data untuk frontend (mengubah GeoPoint menjadi objek lat/lon)\nconst formattedGeofences = geofences.map(fence => {\n    const newFence = {...fence};\n    if (newFence.koordinat) {\n        newFence.latitude = newFence.koordinat._latitude;\n        newFence.longitude = newFence.koordinat._longitude;\n        delete newFence.koordinat;\n    }\n    return newFence;\n});\n\nmsg.payload = formattedGeofences;\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":490,"y":500,"wires":[["30b5c32214038397"]]},{"id":"13d2128597272887","type":"http in","z":"ac4ecfcaa39d3b7e","name":"POST /api/geofences","url":"/api/geofences","method":"post","upload":true,"swaggerDoc":"","x":160,"y":540,"wires":[["3a8954b14eb4ab04"]]},{"id":"3a8954b14eb4ab04","type":"function","z":"ac4ecfcaa39d3b7e","name":"POST (Add Geofence)","func":"const fb = global.get('firebase');\nconst data = msg.payload;\n\n// Validasi data masukan\nif (!data.nama || typeof data.latitude !== 'number' || typeof data.longitude !== 'number' || typeof data.radius1 !== 'number' || typeof data.radius2 !== 'number') {\n    msg.statusCode = 400;\n    msg.payload = { error: \"Payload harus berisi: nama, latitude, longitude, radius1, dan radius2.\" };\n    node.send(msg);\n    return;\n}\n\nconst dataToSave = {\n    nama: data.nama,\n    radius1: data.radius1,\n    radius2: data.radius2,\n    koordinat: new fb.firestore.GeoPoint(data.latitude, data.longitude)\n};\n\n(async () => {\n    try {\n        const docRef = await fb.firestore().collection('geofences').add(dataToSave);\n        msg.statusCode = 201; // Created\n        msg.payload = { success: true, id: docRef.id, message: \"Geofence berhasil ditambahkan.\" };\n        node.send(msg);\n    } catch (error) {\n        msg.statusCode = 500;\n        msg.payload = { error: \"Gagal menambahkan geofence: \" + error.message };\n        node.send(msg);\n    }\n})();","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":480,"y":540,"wires":[["30b5c32214038397"]]},{"id":"ef2e03094f6544a9","type":"http in","z":"ac4ecfcaa39d3b7e","name":"PUT /api/geofences/:id","url":"/api/geofences/:id","method":"put","upload":true,"swaggerDoc":"","x":160,"y":580,"wires":[["e9a56617522d4aa5"]]},{"id":"e9a56617522d4aa5","type":"function","z":"ac4ecfcaa39d3b7e","name":"PUT (Update Geofence)","func":"const fb = global.get('firebase');\nconst geofenceId = msg.req.params.id;\nconst data = msg.payload;\n\n// Data yang akan diupdate\nconst dataToUpdate = {};\nif (data.nama) dataToUpdate.nama = data.nama;\nif (typeof data.radius1 === 'number') dataToUpdate.radius1 = data.radius1;\nif (typeof data.radius2 === 'number') dataToUpdate.radius2 = data.radius2;\nif (typeof data.latitude === 'number' && typeof data.longitude === 'number') {\n    dataToUpdate.koordinat = new fb.firestore.GeoPoint(data.latitude, data.longitude);\n}\n\n(async () => {\n    try {\n        await fb.firestore().collection('geofences').doc(geofenceId).update(dataToUpdate);\n        msg.statusCode = 200;\n        msg.payload = { success: true, message: `Geofence ${geofenceId} berhasil diperbarui.` };\n        node.send(msg);\n    } catch (error) {\n        msg.statusCode = 500;\n        msg.payload = { error: `Gagal memperbarui geofence: ${error.message}` };\n        node.send(msg);\n    }\n})();","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":470,"y":580,"wires":[["30b5c32214038397"]]},{"id":"f8ea84d3a8e86b0c","type":"http in","z":"ac4ecfcaa39d3b7e","name":"DELETE /api/geofences/:id","url":"/api/geofences/:id","method":"delete","upload":false,"swaggerDoc":"","x":170,"y":620,"wires":[["6eeb777c8d96bd9c"]]},{"id":"6eeb777c8d96bd9c","type":"function","z":"ac4ecfcaa39d3b7e","name":"DELETE (Remove Geofence)","func":"const fb = global.get('firebase');\nconst geofenceId = msg.req.params.id;\n\n(async () => {\n    try {\n        await fb.firestore().collection('geofences').doc(geofenceId).delete();\n        msg.statusCode = 200;\n        msg.payload = { success: true, message: `Geofence ${geofenceId} berhasil dihapus.` };\n        node.send(msg);\n    } catch (error) {\n        msg.statusCode = 500;\n        msg.payload = { error: `Gagal menghapus geofence: ${error.message}` };\n        node.send(msg);\n    }\n})();","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":450,"y":620,"wires":[["30b5c32214038397"]]},{"id":"30b5c32214038397","type":"http response","z":"ac4ecfcaa39d3b7e","name":"Geofence API Response","statusCode":"","headers":{},"x":850,"y":560,"wires":[]},{"id":"99485d6663724b85","type":"http in","z":"ac4ecfcaa39d3b7e","name":"GET /api/realtimelocation","url":"/api/realtimelocation","method":"get","upload":false,"swaggerDoc":"","x":170,"y":460,"wires":[["b404284d7624849e"]]},{"id":"b404284d7624849e","type":"function","z":"ac4ecfcaa39d3b7e","name":"Get Realtime Location","func":"// Nama Node: Get Realtime Location from Firestore\nconst fb = global.get('firebase'); // Ambil koneksi firebase dari global context\nconst deviceId = msg.req.query.deviceId;\n\nif (!deviceId) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"Parameter 'deviceId' diperlukan.\" };\n    node.send(msg);\n    return;\n}\n\n(async () => {\n    try {\n        const docRef = fb.firestore().collection('realtime_locations').doc(deviceId);\n        const docSnap = await docRef.get();\n\n        if (docSnap.exists) {\n            const data = docSnap.data();\n            // Format ulang agar mudah digunakan di frontend\n            msg.payload = {\n                deviceId: data.deviceId,\n                latitude: data.koordinat.latitude,\n                longitude: data.koordinat.longitude,\n                timestamp: data.timestamp.toDate().toISOString() // Kirim sebagai string ISO\n            };\n        } else {\n            msg.statusCode = 404;\n            msg.payload = { error: `Lokasi untuk deviceId '${deviceId}' tidak ditemukan.` };\n        }\n        node.send(msg);\n    } catch (error) {\n        msg.statusCode = 500;\n        msg.payload = { error: \"Gagal mengambil data dari server: \" + error.message };\n        node.send(msg);\n    }\n})();","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":480,"y":460,"wires":[["38ab03dc2fb40fb9"]]},{"id":"38ab03dc2fb40fb9","type":"http response","z":"ac4ecfcaa39d3b7e","name":"Realtime Location Response","statusCode":"200","headers":{},"x":840,"y":460,"wires":[]},{"id":"026c2ed90ce332b5","type":"http in","z":"ac4ecfcaa39d3b7e","name":"POST /api/measure","url":"/api/measure","method":"post","upload":false,"swaggerDoc":"","x":770,"y":180,"wires":[["0a58020a05aeebaf"]]},{"id":"5ec34f5875011c75","type":"http response","z":"ac4ecfcaa39d3b7e","name":"Manual Measure Response","statusCode":"202","headers":{},"x":1280,"y":200,"wires":[]},{"id":"3494977fbc9cdeb4","type":"function","z":"ac4ecfcaa39d3b7e","name":"realtime","func":"// Nama Node: Update Lokasi ke Firestore\n// Node ini menerima data GPS mentah, menyimpannya ke Firestore, \n// lalu meneruskannya ke WebSocket.\n\nconst fb = global.get('firebase');\nif (!fb) {\n    node.error(\"Koneksi Firebase tidak ditemukan.\");\n    return;\n}\n\n// 1. Ambil data dari pesan masuk\nconst topicParts = msg.topic.split('/');\nlet deviceId = topicParts[topicParts.length - 1];\nif (!deviceId || deviceId === 'gps') {\n    deviceId = \"gps_wastelog_01\"; // Fallback, sesuaikan jika perlu\n}\n\nconst gpsData = msg.payload;\nconst latitude = gpsData.latitude;\nconst longitude = gpsData.longitude;\n\n// Validasi data\nif (typeof latitude !== 'number' || typeof longitude !== 'number') {\n    node.warn(\"Data latitude/longitude tidak valid, pembaruan dibatalkan.\");\n    return null; // Hentikan alur jika data tidak valid\n}\n\n// 2. Siapkan data untuk disimpan\nconst locationData = {\n    koordinat: new fb.firestore.GeoPoint(latitude, longitude),\n    timestamp: new Date(gpsData.gps_time || Date.now()),\n    deviceId: deviceId\n};\n\n// 3. Simpan ke Firestore (menggunakan .set() untuk membuat/meng-overwrite)\n(async () => {\n    try {\n        // Nama koleksi baru: 'realtime_locations'\n        // ID Dokumen: deviceId\n        // Ini akan meng-update dokumen yang ada, atau membuat yang baru jika belum ada.\n        await fb.firestore()\n            .collection('realtime_locations')\n            .doc(deviceId)\n            .set(locationData, { merge: true }); // merge:true agar tidak menghapus field lain jika ada\n\n        node.log(`Lokasi real-time untuk ${deviceId} berhasil diupdate.`);\n\n        // 4. Setelah berhasil disimpan, teruskan pesan asli ke node selanjutnya (WebSocket)\n        node.send(msg);\n\n    } catch (error) {\n        node.error(`Gagal mengupdate lokasi real-time: ${error.message}`);\n    }\n})();\n\n// Jangan return msg di sini karena prosesnya async.\n// node.send(msg) akan dipanggil setelah proses async selesai.\nreturn;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":380,"y":180,"wires":[["18463f14e4f1d96c"]]},{"id":"18463f14e4f1d96c","type":"websocket out","z":"ac4ecfcaa39d3b7e","name":"Kirim Lokasi Real-time","server":"websocket-listener-main","client":"","x":560,"y":180,"wires":[]},{"id":"041f322a9b25e504","type":"http in","z":"ac4ecfcaa39d3b7e","name":"GET /api/current_volume","url":"/api/current_volume","method":"get","upload":false,"swaggerDoc":"","x":170,"y":380,"wires":[["38bafc4c1859f981"]]},{"id":"38bafc4c1859f981","type":"function","z":"ac4ecfcaa39d3b7e","name":"Get Current Volume","func":"// Nama Node: Get Current Volume from Firestore\n// Node ini berfungsi sebagai endpoint HTTP untuk mengambil data pengukuran\n// volume terkini dari koleksi 'current_volume' berdasarkan deviceId.\n\nconst fb = global.get('firebase'); // Ambil koneksi firebase dari global context\nconst deviceId = msg.req.query.deviceId; // Ambil deviceId dari parameter URL (?deviceId=xxxx)\n\n// 1. Validasi Input: Pastikan deviceId diberikan dalam request\nif (!deviceId) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"Parameter 'deviceId' diperlukan pada URL.\" };\n    node.send(msg);\n    return;\n}\n\n(async () => {\n    try {\n        // 2. Buat referensi ke dokumen yang benar\n        const docRef = fb.firestore().collection('current_volume').doc(deviceId);\n        const docSnap = await docRef.get(); // Ambil dokumen\n\n        // 3. Cek apakah dokumen ditemukan\n        if (docSnap.exists) {\n            const data = docSnap.data();\n            \n            // Format ulang payload agar rapi dan siap digunakan di frontend\n            // Ambil semua field yang relevan dari data volume\n            msg.statusCode = 200; // OK\n            msg.payload = {\n                deviceId: data.deviceId,\n                calculatedVolume_liter: data.calculatedVolume_liter,\n                distance_cm: data.distance_cm,\n                areaName: data.areaName,\n                source: data.source,\n                event: data.event,\n                // Konversi Firestore Timestamp ke string ISO agar universal (JSON-friendly)\n                timestamp: data.timestamp.toDate().toISOString()\n            };\n        } else {\n            // Jika dokumen tidak ditemukan, kirim error 404 Not Found\n            msg.statusCode = 404;\n            msg.payload = { error: `Data volume untuk deviceId '${deviceId}' tidak ditemukan.` };\n        }\n        node.send(msg);\n\n    } catch (error) {\n        // Jika terjadi error pada server/Firestore, kirim error 500\n        msg.statusCode = 500;\n        msg.payload = { error: \"Gagal mengambil data dari server: \" + error.message };\n        node.send(msg);\n    }\n})();","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":480,"y":380,"wires":[["2f1628bc2073100c"]]},{"id":"2f1628bc2073100c","type":"http response","z":"ac4ecfcaa39d3b7e","name":"current_volume response","statusCode":"200","headers":{},"x":850,"y":380,"wires":[]},{"id":"bb98b01d36c262db","type":"debug","z":"ac4ecfcaa39d3b7e","name":"debug 1","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":640,"y":80,"wires":[]},{"id":"7a57d068db4f4e94","type":"debug","z":"ac4ecfcaa39d3b7e","name":"debug 2","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":420,"y":300,"wires":[]}]